input_array = [[[471, 473], [461, 463], [451, 453], [441, 443], [431, 433], [421, 423], [411, 413], [401, 403], [391, 393], [381, 383], [481, 483], [491, 493], [501, 503], [512, 514], [522, 524], [533, 535], [543, 545], [554, 556], [564, 566], [574, 576], [584, 586], [594, 596], [604, 606], [614, 616]], [[689, 691], [679, 681], [669, 671], [659, 661], [649, 651], [639, 641], [629, 631], [699, 701], [710, 712], [720, 722], [731, 733], [741, 743], [752, 754], [762, 764], [773, 775], [783, 785], [793, 795], [803, 805], [813, 815], [823, 825], [833, 835], [843, 845], [853, 855], [863, 865], [873, 875], [883, 885]], [[999, 1001], [989, 991], [979, 981], [969, 971], [959, 961], [949, 951], [939, 941], [929, 931], [919, 921], [909, 911], [899, 901], [889, 891], [1009, 1011], [1020, 1022], [1030, 1032], [1041, 1043], [1051, 1053], [1061, 1063], [1071, 1073], [1082, 1084], [1092, 1094], [1102, 1104], [1112, 1114], [1122, 1124], [1132, 1134], [1142, 1144], [1152, 1154], [1162, 1164], [1172, 1174]], [[1281, 1283], [1271, 1273], [1261, 1263], [1251, 1253], [1241, 1243], [1231, 1233], [1221, 1223], [1211, 1213], [1201, 1203], [1191, 1193], [1291, 1293], [1302, 1304], [1312, 1314], [1322, 1324], [1332, 1334], [1343, 1345], [1353, 1355], [1364, 1366], [1374, 1376], [1384, 1386], [1394, 1396], [1404, 1406], [1414, 1416], [1424, 1426], [1434, 1436], [1444, 1446], [1454, 1456], [1464, 1466], [1474, 1476]], [[1590, 1592], [1580, 1582], [1570, 1572], [1560, 1562], [1550, 1552], [1540, 1542], [1530, 1532], [1520, 1522], [1510, 1512], [1500, 1502], [1490, 1492], [1480, 1482], [1600, 1602], [1611, 1613], [1621, 1623], [1632, 1634], [1642, 1644], [1653, 1655], [1663, 1665], [1674, 1676], [1684, 1686], [1694, 1696], [1704, 1706], [1714, 1716], [1724, 1726], [1734, 1736], [1744, 1746], [1754, 1756], [1764, 1766]], [[1868, 1870], [1858, 1860], [1848, 1850], [1838, 1840], [1828, 1830], [1818, 1820], [1808, 1810], [1798, 1800], [1788, 1790], [1778, 1780], [1878, 1880], [1889, 1891], [1899, 1901], [1909, 1911], [1919, 1921], [1930, 1932], [1940, 1942], [1951, 1953], [1961, 1963], [1971, 1973], [1981, 1983], [1991, 1993], [2001, 2003], [2011, 2013], [2021, 2023], [2031, 2033], [2041, 2043], [2051, 2053], [2061, 2063]], [[2177, 2179], [2167, 2169], [2157, 2159], [2147, 2149], [2137, 2139], [2127, 2129], [2117, 2119], [2107, 2109], [2097, 2099], [2087, 2089], [2077, 2079], [2067, 2069], [2187, 2189], [2198, 2200], [2208, 2210], [2219, 2221], [2229, 2231], [2240, 2242], [2250, 2252], [2261, 2263], [2271, 2273], [2281, 2283], [2291, 2293], [2301, 2303], [2311, 2313], [2321, 2323], [2331, 2333], [2341, 2343], [2351, 2353]], [[2459, 2461], [2449, 2451], [2439, 2441], [2429, 2431], [2419, 2421], [2409, 2411], [2399, 2401], [2389, 2391], [2379, 2381], [2369, 2371], [2469, 2471], [2480, 2482], [2490, 2492], [2501, 2503], [2511, 2513], [2522, 2524], [2532, 2534], [2542, 2544], [2552, 2554], [2562, 2564], [2572, 2574], [2582, 2584], [2592, 2594], [2602, 2604], [2612, 2614], [2622, 2624], [2632, 2634], [2642, 2644], [2652, 2654]], [[2769, 2771], [2759, 2761], [2749, 2751], [2739, 2741], [2729, 2731], [2719, 2721], [2709, 2711], [2699, 2701], [2689, 2691], [2679, 2681], [2669, 2671], [2659, 2661], [2779, 2781], [2789, 2791], [2799, 2801], [2810, 2812], [2820, 2822], [2831, 2833], [2841, 2843], [2852, 2854], [2862, 2864], [2872, 2874], [2882, 2884], [2892, 2894], [2902, 2904], [2912, 2914], [2922, 2924], [2932, 2934], [2942, 2944]], [[3040, 3042], [3030, 3032], [3020, 3022], [3010, 3012], [3000, 3002], [2990, 2992], [2980, 2982], [2970, 2972], [2960, 2962], [2950, 2952], [3050, 3052], [3061, 3063], [3071, 3073], [3082, 3084], [3092, 3094], [3102, 3104], [3112, 3114], [3123, 3125], [3133, 3135], [3143, 3145], [3153, 3155], [3163, 3165], [3173, 3175], [3183, 3185], [3193, 3195], [3203, 3205], [3213, 3215]]]

def get_top_numbers(input_array):
    # Initialize an empty list to store the top numbers
    top_numbers = []

    # Iterate over each sublist in the input array
    for sublist in input_array:
        # Iterate over each pair in the sublist
        for pair in sublist:
            # Append the top number of the pair to the top_numbers list
            top_numbers.append(pair[0])
    
    return sorted(top_numbers)

def y_assigner(y_array, y):
    if not y_array:
        return None

    # Calculate the approximate index using the spacing
    spacing = y_array[1] - y_array[0]
    index = round((y - y_array[0]) / spacing)

    # Clamp the index to valid range
    index = max(0, min(len(y_array) - 1, index))

    # Ensure accuracy by checking adjacent values
    if index > 0 and abs(y - y_array[index - 1]) < abs(y - y_array[index]):
        index -= 1
    if index < len(y_array) - 1 and abs(y - y_array[index + 1]) < abs(y - y_array[index]):
        index += 1

    return y_array[index]

new_input = get_top_numbers(input_array)
print(y_assigner(new_input, 1000))